import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Ridge
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error


# Example usage
df = pd.read_csv("your_dataset.csv")

X = df.drop(columns=["target"])  # replace 'target' with your target column
y = df["target"]

# Identify feature types
categorical_features = X.select_dtypes(include=['int64', 'int32']).columns.tolist()  # Already label encoded
numerical_features = X.select_dtypes(include=['float64', 'float32']).columns.tolist()



# Create transformers
scaler = StandardScaler()

# Apply scaler to both numerical and categorical (already label-encoded) features
preprocessor = ColumnTransformer(
    transformers=[
        ("num", scaler, numerical_features),
        ("cat", scaler, categorical_features)
    ]
)




# Pipeline
ridge_pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', Ridge())
])

# Hyperparameter grid
ridge_params = {
    'regressor__alpha': [0.01, 0.1, 1, 10, 100]
    'regressor__solver': ['auto', 'svd', 'cholesky', 'lsqr', 'saga']

}

ridge_grid = GridSearchCV(ridge_pipeline, ridge_params, cv=5, scoring='neg_root_mean_squared_error')
ridge_grid.fit(X, y)

print("Best Ridge RMSE:", -ridge_grid.best_score_)
print("Best Params:", ridge_grid.best_params_)



xgb_pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', XGBRegressor(objective='reg:squarederror', random_state=42))
])

xgb_params = {
    'regressor__n_estimators': [100, 200, 300],
    'regressor__max_depth': [3, 5, 7],
    'regressor__learning_rate': [0.01, 0.1, 0.2],
    'regressor__subsample': [0.7, 0.8, 1.0]
}

xgb_search = RandomizedSearchCV(xgb_pipeline, xgb_params, n_iter=20, scoring='neg_root_mean_squared_error', cv=3, random_state=42, n_jobs=-1)
xgb_search.fit(X, y)

print("Best XGBoost RMSE:", -xgb_search.best_score_)
print("Best Params:", xgb_search.best_params_)
